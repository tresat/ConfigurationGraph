buildscript {
    ext.versions = [
        kotlin: '1.2.30',
        mockito: '2.15.0',
        spek: '1.1.5',
        junit4Version: '4.12',
        junitVintageVersion: '5.1.0',
        junitPlatformVersion: '1.1.0',
        junitJupiterVersion: '5.1.0',
        log4jVersion: '2.9.0'
    ]

    dependencies {
        classpath "org.junit.platform:junit-platform-gradle-plugin:${versions.junitPlatformVersion}"
    }
}

plugins {
    id 'org.jetbrains.kotlin.jvm' version '1.2.30' // Should match ext.versions.kotlin
    
    // Simplifies adding plugin under test to a classpath
    // Automatically adds gradleApi(), gradleTestKit() deps automatically
    // https://docs.gradle.org/current/userguide/javaGradle_plugin.html
    id 'java-gradle-plugin'

    id 'org.sonarqube' version '2.6'
    id 'com.vanniktech.dependency.graph.generator' version '0.3.0'
}

apply plugin: 'maven' // For local publishing
apply plugin: 'jacoco' // For codecov.io
apply plugin: 'project-report'
apply plugin: 'org.junit.platform.gradle.plugin'
apply plugin: 'build-dashboard'

group = 'com.tomtresansky.gradle.plugin'
version = '0.0.1'

defaultTasks 'build'

repositories {
    jcenter()

    maven {
        url 'http://dl.bintray.com/jetbrains/spek'
    }
}

configurations {
    junitXmlToHtml {
        description = "Needed for consolidating all Junit 5 engines' test output into single HTML report."
    }
}

dependencies {
    junitXmlToHtml 'org.apache.ant:ant-junit:1.9.7'

    compile "org.jetbrains.kotlin:kotlin-stdlib:${versions.kotlin}"
    compile 'guru.nidi:graphviz-java:0.2.3'
    compile 'com.google.guava:guava:24.0-jre'

    testCompile("org.jetbrains.spek:spek-api:${versions.spek}") {
        exclude group: 'org.jetbrains.kotlin' // We are probably using a newer version of Kotlin
    }
    testCompile "org.jetbrains.kotlin:kotlin-reflect:${versions.kotlin}"
    testCompile 'org.assertj:assertj-core:3.6.2'
    testCompile "org.mockito:mockito-core:${versions.mockito}"

    testRuntime("org.jetbrains.spek:spek-junit-platform-engine:${versions.spek}") {
        exclude group: 'org.jetbrains.kotlin' // We are probably using a newer version of Kotlin
    }

    // JUnit Jupiter API and TestEngine implementation
    testCompile("org.junit.jupiter:junit-jupiter-api:${versions.junitJupiterVersion}")
    testRuntime("org.junit.jupiter:junit-jupiter-engine:${versions.junitJupiterVersion}")

    // If you also want to support JUnit 3 and JUnit 4 tests
    testCompile("junit:junit:${versions.junit4Version}")
    testRuntime("org.junit.vintage:junit-vintage-engine:${versions.junitVintageVersion}")

    // To use Log4J's LogManager
    testRuntime("org.apache.logging.log4j:log4j-core:${versions.log4jVersion}")
    testRuntime("org.apache.logging.log4j:log4j-jul:${versions.log4jVersion}")
}

junitPlatform {
    filters {
        engines {
            include 'spek', 'junit-jupiter', 'junit-vintage'
        }
    }
}

/**
 * Merge all Junit 5 XML test results into a single set of HTML reports.
 *
 * See example here:
 *   https://stackoverflow.com/questions/39444908/how-to-create-an-html-report-for-junit-5-tests/39455463#39455463
 */
task generateHtmlTestReports {
    group = 'reporting'
    description = 'Merge all Junit 5 XML test results into a single set of HTML reports'

    ext {
        resultsDir = file("$buildDir/test-results/junit-platform")
        targetDir = file("${project.reportsDir}/junit")
    }

    doLast {
        ant.taskdef(name: 'junitreport_internal',
                classname: 'org.apache.tools.ant.taskdefs.optional.junit.XMLResultAggregator',
                classpath: configurations.junitXmlToHtml.asPath)

        ant.junitreport_internal(todir: resultsDir) {
            fileset(dir: resultsDir, includes: 'TEST-*.xml')
            report(todir: targetDir, format: 'frames')
        }
    }
}

/**
 * JaCoCo should run on the output of the junitPlatformTest task.
 *
 * https://docs.gradle.org/current/userguide/jacoco_plugin.html
 */
jacoco {
    applyTo junitPlatformTest
}


jacocoTestReport {
    group = 'reporting'

    dependsOn junitPlatformTest

    reports {
        xml.enabled true // needed for codecov.io, which expects a /build/reports/jacoco/test/jacocoTestReport.xml
        csv.enabled false
        html.destination file("${project.reportsDir}/jacoco")
    }

    executionData = files("$buildDir/jacoco/junitPlatformTest.exec")
}

uploadArchives {
    repositories {
        mavenDeployer {
            repository(url: uri('../repo'))
        }
    }
}

/*
 * Define the version of the Gradle Wrapper we'll be using.
 *
 * See https://docs.gradle.org/current/userguide/gradle_wrapper.html
 */
task wrapper(type: Wrapper) {
    group = 'Build Setup'
    description = 'Call to regenerate the wrapper jar when the Gradle version # for running the build is updated'

    gradleVersion = '4.6'
    
    // Get gradle-all distribution that contains not only the binaries but also the sources for development
    distributionUrl = "http://services.gradle.org/distributions/gradle-$gradleVersion-all.zip"
}

afterEvaluate {
    /*
     * By default, version 0.3.0 of the dependency graph generator plugin outputs to project root.  Put it in a
     * proper reports sub-directory.  Since it does not create tasks for each generator to actually do the graph
     * generation until AFTER project evaluation, have to tweak the task configuration then.
     */
    def depReportDir = "${project.reportsDir}/dependency-graph"
    generateDependencyGraph {
        outputFileDot = file("$depReportDir/dependency-graph.dot")
        outputFileImage = file("$depReportDir/dependency-graph.png")
    }

    // Consolidated Unit Test HTML reports depend on JUnit, run with check
    def junitPlatformTestTask = tasks.getByName('junitPlatformTest')
    generateHtmlTestReports.dependsOn(junitPlatformTestTask)
    check.dependsOn(generateHtmlTestReports)

    // Needed for codecov, jacocoTestReport runs with check
    check.dependsOn jacocoTestReport

    // And add the project report in there too
    check.dependsOn projectReport
}

// Per: https://docs.gradle.org/current/userguide/javaGradle_plugin.html
// This is a way to avoid keeping the META-INF dir actually around for the gradle plugin properties file
/*
gradlePlugin {
    plugins {
        simplePlugin {
            id = 'org.gradle.sample.simple-plugin'
            implementationClass = 'org.gradle.sample.SimplePlugin'
        }
    }
}
*/

// TODO: Experiment with Alternate means of creating mock maker file
// https://github.com/hhariri/mockito-sample/blob/master/build.gradle#L16
/*
task createTestResources << {
    def mockMakerFile = new File("$projectDir/src/test/resources/mockito-extensions/org.mockito.plugins.MockMaker")
    if (System.env.MOCK_MAKER != null) {
        logger.info("Using MockMaker ${System.env.MOCK_MAKER}")
        mockMakerFile.parentFile.mkdirs()
        mockMakerFile.createNewFile()
        mockMakerFile.write(System.env.MOCK_MAKER)
    } else {
        logger.info("Using default MockMaker")
    }
}
*/