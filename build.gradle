buildscript {
    ext.versions = [
        kotlin: '1.2.40',
        kotlinxHtml: '0.6.9',
        graphViz: '0.4.0',
        grgit: '2.2.0',
        guava: '24.1-jre',
        assertj: '3.9.1',
        antJunit: '1.10.3',
        mockito: '2.18.3',

/* Stay at 1.1.5 of Spek, updating to 1.1.19 yields:
WARNING: TestEngine with ID 'spek' failed to discover tests
java.lang.NoClassDefFoundError: org/junit/platform/engine/discovery/ClasspathSelector
        at org.jetbrains.spek.engine.SpekTestEngine.resolveSpecs(SpekTestEngine.kt:49)
        at org.jetbrains.spek.engine.SpekTestEngine.discover(SpekTestEngine.kt:36)
        at org.junit.platform.launcher.core.DefaultLauncher.discoverEngineRoot(DefaultLauncher.java:130)
        at org.junit.platform.launcher.core.DefaultLauncher.discoverRoot(DefaultLauncher.java:117)
        at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:90)
        at org.junit.platform.console.tasks.ConsoleTestExecutor.executeTests(ConsoleTestExecutor.java:65)
        at org.junit.platform.console.tasks.ConsoleTestExecutor.lambda$execute$0(ConsoleTestExecutor.java:57)
        at org.junit.platform.console.tasks.CustomContextClassLoaderExecutor.invoke(CustomContextClassLoaderExecutor.java:33)
        at org.junit.platform.console.tasks.ConsoleTestExecutor.execute(ConsoleTestExecutor.java:57)
        at org.junit.platform.console.ConsoleLauncher.executeTests(ConsoleLauncher.java:84)
        at org.junit.platform.console.ConsoleLauncher.execute(ConsoleLauncher.java:74)
        at org.junit.platform.console.ConsoleLauncher.execute(ConsoleLauncher.java:47)
        at org.junit.platform.console.ConsoleLauncher.main(ConsoleLauncher.java:39)
Caused by: java.lang.ClassNotFoundException: org.junit.platform.engine.discovery.ClasspathSelector
        at java.net.URLClassLoader.findClass(URLClassLoader.java:381)
        at java.lang.ClassLoader.loadClass(ClassLoader.java:424)
        at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:331)
        at java.lang.ClassLoader.loadClass(ClassLoader.java:357)
        ... 13 more
*/
        spek: '1.1.5',

        junit4Version: '4.12',
        junitVintageVersion: '5.1.1',
        junitPlatformVersion: '1.1.1',
        junitJupiterVersion: '5.1.1',
        log4jVersion: '2.11.0'
    ]

    repositories {
        jcenter()
    }

    dependencies {
        classpath "org.ajoberstar:grgit:$versions.grgit"
        classpath "org.junit.platform:junit-platform-gradle-plugin:$versions.junitPlatformVersion"
    }
}

plugins {
    id 'org.jetbrains.kotlin.jvm' version '1.2.40' // Should match ext.versions.kotlin
    
    // Simplifies adding plugin under test to a classpath
    // Automatically adds gradleApi(), gradleTestKit() deps automatically
    // https://docs.gradle.org/current/userguide/javaGradle_plugin.html
    id 'java-gradle-plugin'

    id 'org.sonarqube' version '2.6.2'
    id 'com.vanniktech.dependency.graph.generator' version '0.4.0'
    id 'com.github.ben-manes.versions' version '0.17.0'
}

apply plugin: 'maven' // For local publishing
apply plugin: 'jacoco' // For codecov.io
apply plugin: 'project-report'
apply plugin: 'org.junit.platform.gradle.plugin'
apply plugin: 'build-dashboard'

ext {
    baseVersion = '0.0.1'
    timestamp = new Date()

    // Open the Git repository in this project's root directory
    // Via: http://mrhaki.blogspot.com/2015/04/gradle-goodness-use-git-commit-id-in.html
    git = org.ajoberstar.grgit.Grgit.open(dir: project.rootDir)

    // Get commit id of HEAD.
    revision = git.head().id
    // Alternative is using abbreviatedId of head() method.
    // revision = git.head().abbreviatedId
}

group = 'com.tomtresansky.gradle.plugin'
version = "$baseVersion-$revision-${timestamp.getTime()}"

defaultTasks 'build'

sourceSets {
    test {
        resources {
            srcDirs = ['src/test/resources/images',
                       'src/test/resources/mockito',
                       'src/test/resources/version']
        }
    }
}

repositories {
    jcenter()

    maven {
        url 'http://dl.bintray.com/jetbrains/spek'
    }
}

configurations {
    junitXmlToHtml {
        description = "Needed for consolidating all JUnit 5 engines' test output into single HTML report."
    }
}

dependencies {
    junitXmlToHtml "org.apache.ant:ant-junit:$versions.antJunit"

    implementation "org.jetbrains.kotlin:kotlin-stdlib:$versions.kotlin"
    implementation "guru.nidi:graphviz-java:$versions.graphViz"
    implementation "com.google.guava:guava:$versions.guava"
    implementation "org.jetbrains.kotlinx:kotlinx-html-jvm:$versions.kotlinxHtml"

    testImplementation("org.jetbrains.spek:spek-api:$versions.spek") {
        exclude group: 'org.jetbrains.kotlin' // We are probably using a newer version of Kotlin
    }
    testImplementation "org.jetbrains.kotlin:kotlin-reflect:$versions.kotlin"
    testImplementation "org.assertj:assertj-core:$versions.assertj"
    testImplementation "org.mockito:mockito-core:$versions.mockito"

    testRuntimeOnly("org.jetbrains.spek:spek-junit-platform-engine:$versions.spek") {
        exclude group: 'org.jetbrains.kotlin' // We are probably using a newer version of Kotlin
    }

    // JUnit Jupiter API and TestEngine implementation
    testImplementation("org.junit.jupiter:junit-jupiter-api:$versions.junitJupiterVersion")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:$versions.junitJupiterVersion")

    // If you also want to support JUnit 3 and JUnit 4 tests
    testImplementation("junit:junit:$versions.junit4Version")
    testRuntimeOnly("org.junit.vintage:junit-vintage-engine:$versions.junitVintageVersion")

    // To use Log4J's LogManager
    testRuntimeOnly("org.apache.logging.log4j:log4j-core:$versions.log4jVersion")
    testRuntimeOnly("org.apache.logging.log4j:log4j-jul:$versions.log4jVersion")
}

junitPlatform {
    filters {
        engines {
            include 'spek', 'junit-jupiter', 'junit-vintage'
        }
    }
}

/**
 * Merge all Junit 5 XML test results into a single set of HTML reports.
 *
 * See example here:
 *   https://stackoverflow.com/questions/39444908/how-to-create-an-html-report-for-junit-5-tests/39455463#39455463
 */
task generateHtmlTestReports {
    group = 'reporting'
    description = 'Merge all Junit 5 XML test results into a single set of HTML reports'

    ext {
        resultsDir = file("$buildDir/test-results/junit-platform")
        targetDir = file("$project.reportsDir/junit")
    }

    doLast {
        ant.taskdef(name: 'junitreport_internal',
                classname: 'org.apache.tools.ant.taskdefs.optional.junit.XMLResultAggregator',
                classpath: configurations.junitXmlToHtml.asPath)

        ant.junitreport_internal(todir: resultsDir) {
            fileset(dir: resultsDir, includes: 'TEST-*.xml')
            report(todir: targetDir, format: 'frames')
        }
    }
}

/**
 * JaCoCo should run on the output of the junitPlatformTest task.
 *
 * https://docs.gradle.org/current/userguide/jacoco_plugin.html
 */
jacoco {
    applyTo junitPlatformTest
}


jacocoTestReport {
    group = 'reporting'

    dependsOn junitPlatformTest

    reports {
        xml.enabled true // needed for codecov.io, which expects a /build/reports/jacoco/test/jacocoTestReport.xml
        csv.enabled false
        html.destination file("$project.reportsDir/jacoco")
    }

    executionData = files("$buildDir/jacoco/junitPlatformTest.exec")
}

jar {
    version = baseVersion
}

uploadArchives {
    repositories {
        mavenDeployer {
            repository(url: uri('../repo'))
        }
    }
}

/*
 * Define the version of the Gradle Wrapper we'll be using.
 *
 * See https://docs.gradle.org/current/userguide/gradle_wrapper.html
 */
task wrapper(type: Wrapper) {
    group = 'Build Setup'
    description = 'Call to regenerate the wrapper jar when the Gradle version # for running the build is updated'

    gradleVersion = '4.6'
    
    // Get gradle-all distribution that contains not only the binaries but also the sources for development
    distributionUrl = "http://services.gradle.org/distributions/gradle-$gradleVersion-all.zip"
}

task generateVersionProperties() {
    group = 'Build'
    description = 'Create version.properties file containing info about the current build'

    inputs.property('baseVersion') {
        baseVersion
    }
    inputs.property('timestamp') {
        timestamp
    }
    inputs.property('revision') {
        revision
    }

    ext.outputDir = "$buildDir/generated-main/com/tomtresansky/gradle/plugin/configurationreport"
    outputs.dir(outputDir)
    ext.versionFile = file("$outputDir/version.properties")

    sourceSets.main.output.dir(builtBy: generateVersionProperties) {
        outputDir
    }

    doLast {
        if (versionFile.exists()) {
            versionFile.delete()
        }
        versionFile.createNewFile()

        versionFile.text = """# $project.name
                |project.version=$baseVersion
                |build.time=$timestamp
                |git.commit=$revision
                |""".stripMargin()
    }
}
processResources.dependsOn generateVersionProperties

dependencyUpdates {
    group = 'reporting'
    revision = 'release'
    outputFormatter = 'plain,xml'
    outputDir = "$reportsDir/dependencyUpdates"

    // Ignore non-release versions per https://github.com/ben-manes/gradle-versions-plugin#revisions
    resolutionStrategy = {
        componentSelection { rules ->
            rules.all { ComponentSelection selection ->
                boolean rejected = ['alpha', 'beta', 'rc', 'cr', 'm'].any { qualifier ->
                    selection.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-]*/
                }
                if (rejected) {
                    selection.reject('Release candidate')
                }
            }
        }
    }

    // Provide HTML output per https://github.com/ben-manes/gradle-versions-plugin#custom-report-format
    ext.htmlOutputFile = file("$outputDir/report.html")
    outputs.file htmlOutputFile

    outputFormatter = { result ->
        def updatable = result.outdated.dependencies
        if (!updatable.isEmpty()){
            def writer = new StringWriter()
            def html = new groovy.xml.MarkupBuilder(writer)

            html.html {
                body {
                    table {
                        thead {
                            tr {
                                td("Group")
                                td("Module")
                                td("Current version")
                                td("Latest version")
                            }
                        }
                        tbody {
                            updatable.each { dependency->
                                tr {
                                    td(dependency.group)
                                    td(dependency.name)
                                    td(dependency.version)
                                    td(dependency.available.release ?: dependency.available.milestone)
                                }
                            }
                        }
                    }
                }
            }

            htmlOutputFile.text = writer.toString()
        }
    }
}

afterEvaluate {
    /*
     * By default, version 0.3.0 of the dependency graph generator plugin outputs to project root.  Put it in a
     * proper reports sub-directory.  Since it does not create tasks for each generator to actually do the graph
     * generation until AFTER project evaluation, have to tweak the task configuration then.
     */
    def depReportDir = "${project.reportsDir}/dependency-graph"
    generateDependencyGraph {
        outputFileDot = file("$depReportDir/dependency-graph.dot")
        outputFileImage = file("$depReportDir/dependency-graph.png")
    }

    check.dependsOn(generateDependencyGraph)
    check.dependsOn(dependencyUpdates)

    // Consolidated Unit Test HTML reports depend on JUnit, run with check
    def junitPlatformTestTask = tasks.getByName('junitPlatformTest')
    generateHtmlTestReports.dependsOn(junitPlatformTestTask)
    check.dependsOn(generateHtmlTestReports)

    // Needed for codecov, jacocoTestReport runs with check
    check.dependsOn jacocoTestReport

    // And add the project report in there too
    check.dependsOn projectReport

    // Build dashboard does a check
    buildDashboard.dependsOn(check)
}

// Per: https://docs.gradle.org/current/userguide/javaGradle_plugin.html
// This is a way to avoid keeping the META-INF dir actually around for the gradle plugin properties file
/*
gradlePlugin {
    plugins {
        simplePlugin {
            id = 'org.gradle.sample.simple-plugin'
            implementationClass = 'org.gradle.sample.SimplePlugin'
        }
    }
}
*/

// TODO: Experiment with Alternate means of creating mock maker file
// https://github.com/hhariri/mockito-sample/blob/master/build.gradle#L16
/*
task createTestResources << {
    def mockMakerFile = new File("$projectDir/src/test/resources/mockito-extensions/org.mockito.plugins.MockMaker")
    if (System.env.MOCK_MAKER != null) {
        logger.info("Using MockMaker ${System.env.MOCK_MAKER}")
        mockMakerFile.parentFile.mkdirs()
        mockMakerFile.createNewFile()
        mockMakerFile.write(System.env.MOCK_MAKER)
    } else {
        logger.info("Using default MockMaker")
    }
}
*/